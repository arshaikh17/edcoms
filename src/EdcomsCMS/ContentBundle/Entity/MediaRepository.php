<?php

namespace EdcomsCMS\ContentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use EdcomsCMS\ContentBundle\Entity\Structure;

/**
 * MediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends EntityRepository
{
    public function findByFile($file)
    {
        $media = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT m, mf, mt "
                            . "FROM EdcomsCMSContentBundle:Media m "
                            . "LEFT JOIN m.mediaFiles mf "
                            . "LEFT JOIN mf.type mt "
                            . "LEFT JOIN m.mediaFiles mfs "
                            . "WHERE mfs.filename=:filename")
                ->setParameter('filename', $file)
                ->getOneOrNullResult();
        return $media;
    }
    
    /**
     * Returns a collection of media objects matching the criteria contained within ''$files'.
     * The '$files' array should contain an array for each Media object to retrieve and have the following keys and values:
     *   - name: name of the Media object to retrieve.
     *   - path: path of the Media object to retrieve.
     *
     * @param   array       $files      Media objects search criteria.
     *
     * @return  array                   Collection of found Media objects matching the criteria.
     */
    public function findByFileNamesAndPaths(array $files)
    {
        $parameters = [];
        $sql = '';
        $filesCount = count($files);
        
        if ($filesCount === 0) {
            return [];
        }
        
        for ($i = 0; $i < $filesCount; $i++) {
            $file = $files[$i];
            
            if (strlen($sql) !== 0) {
                $sql .= ' OR ';
            }
            
            $sql .= "(m.deleted = FALSE AND m.title = :n_$i AND m.path = :p_$i)";
            $parameters["n_$i"] = $file['name'];
            $parameters["p_$i"] = $file['path'];
        }
        
        $medias = $this
            ->getEntityManager('edcoms_cms')
            ->createQuery(
                'SELECT ' .
                    'm, ' .
                    'mf, ' .
                    'mt ' .
                'FROM ' .
                    'EdcomsCMSContentBundle:Media m ' .
                    'LEFT JOIN m.mediaFiles mf ' .
                    'LEFT JOIN mf.type mt ' .
                'WHERE ' .
                    $sql
            )
            ->setParameters($parameters)
            ->getResult();
        
        return $medias;
    }
    
    /**
     * Recursively searches through $structure for the CustomFields in the children.
     * Any CustomField with the name of 'file' is returned as this is presumed a downloadable file.
     *
     * @param   Structure   $structure      The parent structure to search through.
     * @param   string      $relativePath   If not null, each file path has this value concatenated to the beginning.
     *
     * @return  array                       Collection of found file paths.
     */
    public function findDownloadFilesFromStructure(Structure $structure, $relativePath = null)
    {
        $em = $this->getEntityManager('edcoms_cms');
        $fileLocations = $em
            ->getRepository('EdcomsCMSContentBundle:CustomFieldData')
            ->findDownloadFilesFromStructure($structure);
        
        // iterate through all found media URLs and setup the criteria to search the Media objects with.
        array_walk($fileLocations, function (&$fileLocation) {
            $fileLocationValue = $fileLocation['location'];
            $fileLocationPathParts = explode('/media/view', dirname($fileLocationValue));
            $fileLocationPath = ltrim($fileLocationPathParts[1], '/');
            
            $fileLocation = [
                'name' => urldecode(basename($fileLocationValue)),
                'path' => $fileLocationPath
            ];
        });
        
        // get the Media objects by the criteria.
        $fileLocations = $this->findByFileNamesAndPaths($fileLocations);
        
        // iterate through the retrieved Media objects and setup an array suitable to be used for downloading the linked file.
        array_walk($fileLocations, function (&$fileLocation) use ($relativePath) {
            $fileLocation = [
                'location' => ($relativePath !== null ? $relativePath : '') . rtrim((!empty($fileLocation->getPath())?'/'.$fileLocation->getPath():''), '/') . '/' . ltrim($fileLocation
                    ->getMediaFiles()
                    ->first()
                    ->getFilename(), '/'),
                'name' => $fileLocation->getTitle()
            ];
        });
        
        return $fileLocations;
    }
    
    /**
     * Get all medias by the beginning of the path property
     *
     * @param $path - string to search for
     * @return array - found medias
     */
    public function findByStartOfPath($path)
    {
        $media = $this->getEntityManager('edcoms_cms')
            ->createQuery("SELECT m, mf, mt "
                            . "FROM EdcomsCMSContentBundle:Media m "
                            . "LEFT JOIN m.mediaFiles mf "
                            . "LEFT JOIN mf.type mt "
                            . "LEFT JOIN m.mediaFiles mfs "
                            . "WHERE m.path LIKE :path")
                ->setParameter('path', $path.'%')
                ->getResult();
        return $media;
    }

    /**
     * Rename a path or start of a path in all Media entities
     *
     * @param $oldPath - string
     * @param $newPath - string
     * @return int - number of rows affected
     * @throws \Doctrine\DBAL\DBALException
     */
    public function renamePath($oldPath, $newPath)
    {
        $sql = "UPDATE
                  media
                SET
                  path = regexp_replace(path, ?, ?)
                WHERE
                  path ~ ?
                OR path ~ ?";
        $conn = $this->getEntityManager()->getConnection();
        $results = $conn->executeUpdate($sql,
            ["^$oldPath", $newPath, "[[:<:]]".$oldPath."[[:>:]]", "^$oldPath/"],
            [\PDO::PARAM_STR, \PDO::PARAM_STR, \PDO::PARAM_STR, \PDO::PARAM_STR]);
        return $results;
    }
}
