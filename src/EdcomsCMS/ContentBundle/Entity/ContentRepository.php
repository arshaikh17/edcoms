<?php

namespace EdcomsCMS\ContentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;
use EdcomsCMS\ContentBundle\Model\AbstractFilterOptions;
use EdcomsCMS\ContentBundle\Helpers\ContentHelper;

/**
 * ContentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRepository extends EntityRepository
{
    const STATUS= ['published', 'previous', 'draft', 'archived', 'pending'];
    public function findByStructure($id)
    {
        $content = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT c, s "
                            . "FROM EdcomsCMSContentBundle:Content c "
                            . "LEFT JOIN c.structure s "
                            . "WHERE s.id=:id "
                            . "ORDER BY c.addedOn DESC")
                ->setParameter('id', $id)
                ->getResult();

        if (null === $content) {
            $message = sprintf(
                'Unable to find an active Content EdcomsCMSContentBundle:Content object identified by "%d".',
                $id
            );
            throw new Exception($message);
        }
        return $content;
    }

    /**
     * Get content by structure id, status & visible
     * defaulting to status = published and visible = true
     *
     * @param $id
     * @param string $status
     * @param bool|true $visible
     * @return array
     */
    public function findByStructureStatusAndVisibility($id, $status='published', $visible=true)
    {
        $content = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT c "
                            . "FROM EdcomsCMSContentBundle:Content c "
                            . "LEFT JOIN c.structure s "
                            . "WHERE s.id=:id AND s.visible=:visible AND c.status=:status "
                            . "ORDER BY c.addedOn DESC")
                ->setParameter('id', $id)
                ->setParameter('visible', $visible)
                ->setParameter('status', $status)
                ->getResult();
        return $content;
    }

    public function findByStatusAndVisibility($status='published', $visible=true)
    {
        $content = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT c "
                            . "FROM EdcomsCMSContentBundle:Content c "
                            . "LEFT JOIN c.structure s "
                            . "WHERE s.visible=:visible AND c.status=:status "
                            . "ORDER BY c.addedOn DESC")
                ->setParameter('visible', $visible)
                ->setParameter('status', $status)
                ->getResult();
        return $content;
    }

    /**
     * Get content by structure deletion & visibility and by content status
     * excluding content that are behind login
     * defaulting to status = published and visible = true and delete = false
     *
     * @param string $status
     * @param bool|true $visible
     * @param bool|true $delete
     * @return Content
     */
    public function findByStatusAndVisibilityAndDeletion($status='published', $visible=true, $delete=false)
    {
        $content = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT c "
                            . "FROM EdcomsCMSContentBundle:Content c "
                            . "LEFT JOIN c.structure s "
                            . "WHERE s.visible=:visible AND c.status=:status AND s.deleted=:delete "
                            . "ORDER BY c.addedOn DESC")
                ->setParameter('visible', $visible)
                ->setParameter('status', $status)
                ->setParameter('delete', $delete)
                ->getResult();

        //remove contents that require login
        foreach ($content as $key => $value) {
            foreach ($value->getCustomFieldData() as $keys => $val) {
                if (($val->getCustomFields()->getName() === 'permission' || $val->getCustomFields()->getName() === 'permission_check') && $val->getValue() === '1') {
                    unset($content[$key]);
                }
            }
        }
        return $content;
    }

    public function findByStructureArr($ids, $status=null)
    {
        $content = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT c "
                            . "FROM EdcomsCMSContentBundle:Content c "
                            . "WHERE c.structure IN (:ids) "
                            . ((!is_null($status)) ? "AND c.status=:status " : " AND 1=:status ")
                            . "ORDER BY c.addedOn DESC")
                ->setParameter('ids', $ids)
                ->setParameter('status', (is_null($status)) ? 1 : $status)
                ->getResult();

        if (null === $content) {
            $message = sprintf(
                'Unable to find an active Content EdcomsCMSContentBundle:Content object identified by "%s".',
                implode(',', $ids)
            );
            throw new Exception($message);
        }
        $contentArr = [];
        foreach ($content as $contentItem) {
            $contentArr[$contentItem->getStructure()->getId()] = $contentItem;
        }
        return $contentArr;
    }
    
    /**
     * Fetches the Content entity from the database where the structure has been set as '$structure'.
     * We perform the filtering and pagination here, so that we only retrieve the barest minimum amount of data is retrieved from the database.
     * If '$filterOptions' is not null, the content is filtered according to the selected filter values and criteria.
     * If '$paginationInfo' is not null, the content is paginated accordingly.
     * 
     * @param   Structure   $structure          Parent structure object of content to fetch.
     * @param   array       $filterOptions      Collection of selected values to filter the content with. Filtering ignored if value is null.
     * @param   array       $paginationInfo     Collection of values to paginate the content with. Pagination ignored if value is null.
     * @param   string      $status             Returns content with the status matching the value of this parameter.
     * @param   boolean     $deleted            Returns content with the deleted flag matching the value of this parameter.
     *
     * @return  Content                         The fetched Content(s) mapped from the results of the SQL queries executed.
     * 
     * @throws \Exception
     */
    public function findByStructureWithFilterAndPagination(Structure $structure, $filterOptions = null, &$paginationInfo = null, $status=null, $deleted=false, $childrenIDs=[])
    {   
        $deleted = $deleted ? 'true' : 'false';
        
        // set up pagination according to values in '$paginationInfo'.
        $originalLimit = (!is_null($paginationInfo) && !empty($paginationInfo)) ? $paginationInfo[ContentHelper::CUSTOMFIELD_LIMIT_NAME] : ContentHelper::PAGINATIONINFO_NOT_SET;
        $limit = $originalLimit;
        $page = (!is_null($paginationInfo) && !empty($paginationInfo)) ? $paginationInfo[ContentHelper::CUSTOMFIELD_PAGE_NAME] : 1;
        $startLimit = (!is_null($paginationInfo) && !empty($paginationInfo)) ? $paginationInfo[ContentHelper::CUSTOMFIELD_START_LIMIT_NAME] : $limit;
        
        $limitSet = $limit !== ContentHelper::PAGINATIONINFO_NOT_SET;
        $startLimitSet = $startLimit !== ContentHelper::PAGINATIONINFO_NOT_SET;
        
        // set up and calculate the offset.
        // start '$offset' with -1 indicating there is no offset.
        $offset = ContentHelper::PAGINATIONINFO_NOT_SET;
        
        if ($limitSet || ($startLimitSet && $page === 1)) {
            $limitSet = true;
            $limitValue = $limit;
            $limit = $page === 1 ? $startLimit : $limit;
            $offset = $page === 1 ? 0 : $startLimit + ($limitValue * ($page - 2));
            
            // increment the limit by one, so that if the extra row is fetched,
            // we know to truncate the results and set the flags indicating that more data can be fetched.
            if ($limit !== 0) {
                $limit++;
            }
        }
        
        
        // first query retrieves the IDs of the child Structure objects.
        // the IDs are paginated and filtered according to the 'selected' values in '$filterOptions' if not null.
        $subQueryParameters = ['structureid' => $structure->getId()];
        
        // see if childrenIDs is not empty, if it has values, make sure only results in this set are returned \\
        $childrenspecified = false;
        if (is_array($childrenIDs) && !empty($childrenIDs)) {
            //if children ids are passed then we need to build this up as a string
            //as these cannot be passed to DB query as a param
            $childrenspecified = true;

            $subQueryChildrenIds = '';
            foreach ($childrenIDs as $k => $childId) {
                $subQueryChildrenIds .= strval((int)$childId) . ',';//cast to int to be safe
            }
            $subQueryChildrenIds = rtrim($subQueryChildrenIds, ',');//remove the final comma
        }
        
        // set the status based on what we've been given \\
        $subQueryParameters['status'] = (is_null($status)) ? 1 : $status;
        
        $subQueryCond = '';

        $filterSearch = null;
        $idsAdded = false;
        
        $joinFieldValues = [];
        $joinFields = [];
        // only process the '$filterOptions' if they have been set.
        if ($filterOptions !== null) {
            $andAppended = false;
            
            $filterKeys = array_keys($filterOptions);
            $filterKeysCount = count($filterKeys);
            for ($i = 0; $i < $filterKeysCount; $i++) {
                $filterKey = $filterKeys[$i];
                $filterOption = $filterOptions[$filterKey];
                
                // get selected values.
                $filterValues = $filterOption['selected'];
                $filterValuesCount = count($filterValues);
                
                $statement = null;
                $firstValueToAppend = true;
                $currentFilterOptions = $filterOption['options'];
                        
                // the '$valuesGlue' is used to match content with customFieldData that either matches all criteria for the customField,
                // or any depending on the value of the option. Default is to match all criteria.
                $valuesGlue = 'AND';
                if (
                        isset($currentFilterOptions[AbstractFilterOptions::FILTEROPTION_MATCHANY]) &&
                        $currentFilterOptions[AbstractFilterOptions::FILTEROPTION_MATCHANY]
                ) {
                    $valuesGlue = 'OR';
                }
                if ($filterValuesCount !== 0) {
                    // if the current filter value has come from the search bar.
                    if ($filterKey === 'filter-search' && isset($filterValues[0]) && $filterValues[0] !== '') {
                        $filterSearch = strtolower($filterValues[0]);
                        $subQueryParameters['filtersearch'] = "%{$filterSearch}%";
                        $glue = $firstValueToAppend ? '' : $valuesGlue;
                        $statement .= " $glue (cfds.value LIKE :filtersearch AND (cfs.name IN ('".implode('\',\'', $filterKeys)."')))";
                        $joinFields[$i] = "LEFT JOIN customfields cfs ON cfds.fieldid = cfs.id";
                        $joinFieldValues[$i] = "LEFT JOIN customfielddata cfds ON c.id = cfds.contentid";
                        
                        
                    } else {
                        // iterate through the selected filter values and build up the SQL in the WHERE clause.
                        for ($f = 0; $f < $filterValuesCount; $f++) {
                            $filterValue = $filterValues[$f];
                            
                            if ($filterValue !== '') {
                                if ($firstValueToAppend) {
                                    // name of the customField we're filtering by.
                                    $statement = "(cf{$i}.name = '{$filterKey}' AND (";
                                }
                                
                                $key = "param_{$i}_{$f}";
                                $subQueryParameters[$key] = "%{$filterValue}%";
                                $glue = $firstValueToAppend ? '' : $valuesGlue;
                                $statement .= " $glue cfd{$i}.value LIKE :{$key}";
                                $joinFields[$i] = "LEFT JOIN customfields cf{$i} ON cfd{$i}.fieldid = cf{$i}.id";
                                $joinFieldValues[$i] = "LEFT JOIN customfielddata cfd{$i} ON c.id = cfd{$i}.contentid";
                                if ($firstValueToAppend) {
                                    $firstValueToAppend = false;
                                }
                            }
                        }
                        
                        // syntax management.
                        // finish off building the SQL if we have started already.
                        if ($statement !== null) {
                            $statement .= '))';
                        }
                    }
                }
                
                if ($statement !== null) {
                    // syntax management.
                    // appends 'AND' if this is the first filter value that's being added to the 'WHERE' criteria.
                    if (!$andAppended) {
                        $subQueryCond .= 'AND (';
                        $andAppended = true;
                    }
                    
                    // syntax management.
                    // appends 'AND' in between each filter value set in the 'WHERE' criteria.
                    if (!$idsAdded) {
                        $idsAdded = true;
                    } else {
                        $subQueryCond .= ' AND ';
                    }
                    
                    $subQueryCond .= $statement;
                }
            }
            
            // syntax management.
            // closes bracket if filter values have been added in the 'WHERE' clause.
            if ($andAppended) {
                $subQueryCond .= ') ';
            }
        }
        
        
        $qStatus = (!is_null($status)) ? 'AND c.status=:status' : '';
        $subQueryStatement = "SELECT DISTINCT s.id, s.priority, s.addedOn AS s_addedOn, c.added_on, c.title "
                . "FROM Structure s "
                . "LEFT JOIN Content c ON c.structureID=s.id $qStatus ";
        if (!empty($joinFields)) {
            array_walk($joinFields, function($join, $i) use (&$subQueryStatement, $joinFieldValues) {
                $subQueryStatement .= $joinFieldValues[$i].' ';
                $subQueryStatement .= $join.' ';
            });
        }
        $subQueryStatement .= "LEFT JOIN Structure p ON s.parentID=p.id "
                . "WHERE p.deleted=$deleted AND "
                . "s.deleted=$deleted $qStatus AND "
                . "p.id=:structureid "
                // RW - new change to only get those children which are in the specified ID list if required \\
                . (($childrenspecified) ? "AND c.id IN ($subQueryChildrenIds) " : '')
                . $subQueryCond;
//        $subQueryStatement = '' .
//            'SELECT ' .
//                'tbl.id ' .
//            'FROM ' .
//                '(' .
//                    'SELECT ' .
//                        's.id, ' .
//                        's.priority, ' .
//                        's.addedOn AS s_addedon, ' .
//                        'c.added_on, ' .
//                        'c.title, ' .
//                        'COUNT(cfd.id) AS count ' .
//                    'FROM ' .
//                        'customfielddata cfd ' .
//                    'LEFT JOIN ' .
//                        'customfields cf ' .
//                    'ON ' .
//                        'cfd.fieldid = cf.id ' .
//                    'LEFT JOIN ' .
//                        '(' .
//                            'SELECT DISTINCT ' .
//                                'c.id, ' .
//                                'c.added_on, ' .
//                                'c.status, ' .
//                                'c.structureid, ' .
//                                'c.title ' .
//                            'FROM '.
//                                'content c ' .
//                            'LEFT JOIN ' .
//                                'customfielddata cfd ' .
//                            'ON ' .
//                                'c.id = cfd.contentid ' .
//                            ($filterSearch !== null ? 'WHERE LOWER(cfd.value) LIKE :filtersearch OR LOWER(c.title) LIKE :filtersearch ' : '') . 
//                        ') c ' .
//                    'ON ' .
//                        'cfd.contentid = c.id ' .
//                    'LEFT JOIN ' .
//                        'structure s ' .
//                    'ON ' .
//                        'c.structureid = s.id ' .
//                    'LEFT JOIN ' .
//                        'structure p ' .
//            		'ON ' .
//                        's.parentid = p.id ' .
//                	'WHERE ' .
//                        ((!is_null($status)) ? "c.status=:status " : "1=:status ") . 'AND ' .
//                        "p.deleted = $deleted AND " .
//                        "s.deleted = $deleted AND " .
//                        'p.id = :structureid ' .
//                        $subQueryStatement . 
//                    'GROUP BY ' .
//            			's.id, ' .
//            			'c.title, ' .
//                        'c.added_on ' .
//                    'ORDER BY ' .
//                        'c.added_on' .
//                ') AS tbl ';
//        
        
        
        $subQueryStatement .= '' .
            'ORDER BY ' .
                's.priority ASC, ' .
                's.addedOn DESC, ' .
                's.id DESC, ' .
                'c.added_on DESC';
        
        $em = $this->getEntityManager();
        
        if ($paginationInfo !== null) {
            $countQuery = $em
                ->getConnection()
                ->prepare("SELECT COUNT(tbl.id) AS count FROM ($subQueryStatement) AS tbl");
            
            $countQuery->execute($subQueryParameters);
            $count = $countQuery->fetch()['count'];
            
            // take the start limit off the total count.
            // it will either be the start limit or the limit if either are set.
            // if both are not set, the total count is assigned to the first page count.
            $startCount = $startLimitSet ? $startLimit : ($limitSet ? $originalLimit : $count);
            
            // first page count cannot be bigger than the total count.
            if ($startCount > $count) {
                $startCount = $count;
            }
            
            // get the count to calculate the pages with.
            $divideCount = $count - $startCount;
            
            // set the first page count as we know what it will be.
            $i = 2;
            $pages = [
                1 => $startCount
            ];
            
            // remove the limit amount from the count until we reach 0.
            // this will populate the pages array.
            while ($divideCount > 0) {
                $pageCount = ($limit - 1);
                
                if ($divideCount < $pageCount) {
                    $pageCount = $divideCount;
                }
                
                $pages[$i] = $pageCount;
                $divideCount -= $pageCount;
                $i++;
            }
            
            // send the pagination information back to the view.
            $paginationInfo[ContentHelper::PAGINATIONINFO_TOTAL_COUNT] = $count;
            $paginationInfo[ContentHelper::PAGINATIONINFO_PAGES] = $pages;
            $paginationInfo[ContentHelper::PAGINATIONINFO_CURRENT_PAGE] = $page;
            $paginationInfo[ContentHelper::PAGINATIONINFO_NEXT_PAGE] = $page < count($pages) ? $page + 1 : false;
            $paginationInfo[ContentHelper::PAGINATIONINFO_PREVIOUS_PAGE] = $page !== 1 ? $page - 1 : false;
        }
        
        // if offset has been set, add into query.
        if ($offset > ContentHelper::PAGINATIONINFO_NOT_SET) {
            $subQueryStatement .= ' OFFSET :offset';
            $subQueryParameters['offset'] = $offset;
            
            // this boolean will be read later by the second query below.
            // to make sure we will filter down the children by the retrieved IDs from the query above,
            // we'll set this boolean to true.
            $idsAdded = true;
        }
        
        // if limit has been set, add into query.
        if ($limitSet) {
            $subQueryStatement .= ' LIMIT :limit';
            $subQueryParameters['limit'] = $limit;
        }
        
        $subQuery = $em
            ->getConnection()
            ->prepare($subQueryStatement);
        
        $subQuery->execute($subQueryParameters);
        
        // iterate through the retrieved array object and set up another one,
        // so the'implode' function can easily be used.
        $fetchedContentIDs = $subQuery->fetchAll();
        $contentIDs = [];
        $contentIDCount = count($fetchedContentIDs);
        
        for ($i = 0; $i < $contentIDCount; $i++) {
            $contentIDs[] = $fetchedContentIDs[$i]['id'];
        }
        
        // query to retrieve content, custom fields and their data associated to '$structure'.
        // we'll also filter the children if '$contentIDs' is populated.
        $content = $em->createQuery("
                            SELECT DISTINCT 
                                c, s 
                            FROM 
                                EdcomsCMSContentBundle:Content c 
                            LEFT JOIN c.structure s 
                            WHERE 
                                s = :structure 
                            AND ".((!is_null($status)) ? "c.status=:status " : "1=:status"))
                    ->setParameter('structure', $structure)
                    ->setParameter('status', (is_null($status)) ? 1 : $status)
                    ->getResult();

                $em->createQuery("
                            SELECT DISTINCT
                                s, ch
                            FROM
                                EdcomsCMSContentBundle:Structure s
                            LEFT JOIN s.children ch WITH ch.id ".
                                ($contentIDCount !== 0 ? "IN(".implode(', ', $contentIDs).")" : "= 0 "). "
                            WHERE 
                                s = :structure")
                    ->setParameter('structure', $structure)
                    ->setFetchMode(Structure::class, 'children', ClassMetadata::FETCH_EXTRA_LAZY)
                    ->getResult();

                $em->createQuery("
                            SELECT DISTINCT
                                ch, chC
                            FROM
                                EdcomsCMSContentBundle:Structure ch
                            LEFT JOIN ch.content chC
                            WHERE
                                ch = :structure
                            AND
                                (chC.status IS NOT NULL AND chC.status = 'published') OR chC.status IS NULL
                            ORDER BY
                                ch.priority ASC,
                                ch.addedOn DESC")
                    ->setParameter('structure', $structure)
                    ->getResult();

                $em->createQuery("
                            SELECT DISTINCT
                                chC, cfd
                            FROM
                                EdcomsCMSContentBundle:Content chC
                            LEFT JOIN chC.custom_field_data cfd
                            WHERE
                                (chC.status IS NOT NULL AND chC.status = 'published') OR chC.status IS NULL")
                    ->getResult();
        
        if ($content === null) {
            $message = sprintf(
                'Unable to find an active Content EdcomsCMSContentBundle:Content object by structure: "%s".',
                $structure->getTitle()
            );
            throw new \Exception($message);
        }
        
        return $content;
    }
    
    public function findByEntry($entry)
    {
        $content = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT c, s, ct, cf, cfd, cfE, cfdE "
                            . "FROM EdcomsCMSContentBundle:Content c "
                            . "LEFT JOIN c.structure s "
                            . "LEFT JOIN c.contentType ct "
                            . "LEFT JOIN ct.custom_fields cf "
                            . "LEFT JOIN c.custom_field_data cfd "
                            . "LEFT JOIN c.custom_field_data cfdE "
                            . "LEFT JOIN ct.custom_fields cfE "
                            . "WHERE (cfdE.value=:entryID AND cfE.name='entryID') "
                            . "ORDER BY c.addedOn DESC")
                ->setParameter('entryID', $entry->getId())
                ->getResult();

        if (null === $content) {
            return false;
        }
        return $content;
    }
}
