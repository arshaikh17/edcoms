<?php

namespace EdcomsCMS\ContentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * Custom_field_dataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomFieldDataRepository extends EntityRepository
{
    /**
     * Finds and returns all the customfielddata values where the associated customfield name is contained within '$fieldNames',
     * and the associated content's strucutre has the ID or is a child to the ID of '$structureID'.
     *
     * @param   integer     $structureID    The ID of the associating structure object to perform the search with.
     * @param   array       $fieldNames     Collection of customfield names to search with.
     * @param   array       $toExclude      Collection of customfield names and values to exclude from the query.
     *
     * @return  array                       The found customfielddata values each with their associated customfield name.
     */
    public function findFilterOptions($structureID, $fieldNames, array $toExclude = [])
    {
        $excludeStatement = '';
        
        foreach ($toExclude as $filterKey => $valuesToExclude) {
            foreach ($valuesToExclude as $valueToExclude) {
                $excludeStatement .= "NOT (cf.name = '$filterKey' AND cfd.value = '$valueToExclude') AND ";
            }
        }
        
        $fieldNamesCount = count($fieldNames);
        $statement = implode(', ', array_fill(0, $fieldNamesCount, '?'));
        
        $statement = '' .
            'SELECT ' .
                's.id AS id, ' .
                'cf.id AS cfid, ' .
                'cf.name AS name, ' .
                'cfd.value AS value ' .
            'FROM ' .
                'contenttype AS ct ' .
            'INNER JOIN ' .
                'content AS c ' .
            'ON ' .
                'ct.id = c.content_type ' .
            'INNER JOIN ' .
            	'customfielddata AS cfd ' .
            'ON ' .
            	'c.id = cfd.contentid ' .
            'INNER JOIN ' .
            	'customfields AS cf ' .
            'ON ' .
            	'cfd.fieldid = cf.id ' .
            'INNER JOIN ' .
            	'structure AS s ' .
            'ON ' .
                'c.structureid = s.id ' .
            'WHERE ' .
            	'c.status = \'published\' AND ' .
            	's.deleted = false AND ' .
            	'cf.name IN (' . $statement . ') AND '.
                $excludeStatement .
            	'c.structureid IN (' .
		            'WITH RECURSIVE s AS (' .
                        'SELECT ' .
				            'id, ' .
				            'parentid ' .
			            'FROM ' .
				            'structure ' .
			            'WHERE ' .
				            'parentid = ? ' .
			            'UNION ALL ' .
			            'SELECT ' .
				            'c.id, ' .
				            'c.parentid ' .
			            'FROM ' .
				            'structure AS c ' .
			            'JOIN ' .
				            's ' .
			            'ON ' .
				            'c.parentid = s.id' .
		            ') ' .
                    'SELECT ' .
                        'id ' .
                    'FROM ' .
                        's'.
    	        ')';
        $parameters = array_merge($fieldNames, [$structureID]);
        $query = $this->getEntityManager('edcoms_cms')
            ->getConnection()
            ->prepare($statement);
        
        $query->execute($parameters);
        $results = $query->fetchAll();
        
        return $results;
    }
    
    /**
     * Recursively searches through $structure for the CustomFields in the children.
     * Any CustomField with the name of 'file' is returned as this is presumed a downloadable file.
     *
     * @param   Structure   $structure      The parent structure to search through.
     *
     * @return  array                       Collection of found file paths.
     */
    public function findDownloadFilesFromStructure(Structure $structure)
    {
        $query = $this
            ->getEntityManager('edcoms_cms')
            ->getConnection()
            ->prepare(
                'WITH RECURSIVE s AS (' .
                    'SELECT ' .
                        'id, ' .
                        'parentid ' .
                    'FROM ' .
                        'structure ' .
                    'WHERE ' .
                        'parentid = :structureid AND ' .
                        'deleted = FALSE ' .
                    'UNION ALL ' .
                    'SELECT ' .
                        'c.id, ' .
                        'c.parentid ' .
                    'FROM ' .
                        'structure AS c ' .
                        'JOIN s ON c.parentid = s.id ' .
                    'WHERE ' .
                        'c.deleted = FALSE' .
                ') ' .
                'SELECT DISTINCT ON (cfd.value) ' .
                    'cfd.value AS location ' .
                'FROM ' .
                    's ' .
                    'JOIN content c ON s.id = c.structureid ' .
                    'JOIN templatefiles t ON c.template_file = t.id ' .
                    'JOIN customfielddata cfd ON c.id = cfd.contentid ' .
                    'JOIN customfields cf ON cfd.fieldid = cf.id ' .
                'WHERE ' .
                    'c.status = \'published\' AND ' .
                    't.template_file = \'download\' AND ' .
                    'cf.name = \'file\' ' .
                'ORDER BY ' .
                    'cfd.value ASC'
            );
        
        $query->execute(['structureid' => $structure->getId()]);
        $results = $query->fetchAll();
        
        return $results;
    }
}
