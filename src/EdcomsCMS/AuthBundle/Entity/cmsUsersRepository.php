<?php

namespace EdcomsCMS\AuthBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;

/**
 * cmsUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class cmsUsersRepository extends EntityRepository implements UserLoaderInterface
{

    /**
     * Find all users for a specified user group
     *
     * @param $group
     * @return array|bool
     */
    public function findAllUsersByGroup($group)
    {
        $user = $this->getEntityManager('edcoms_cms')
            ->createQuery("SELECT u "
                . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                . "WHERE u.deleted=false "
                . "AND :group MEMBER OF u.groups")
            ->setParameter('group', $group)
            ->getResult();

        if (null === $user) {
            return false;
        }
        return $user;
    }

    public function loadUserByUsername($username)
    {
        $user = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE c.type=:type AND u.deleted=false AND (u.username=:username OR c.value=:email)")
                ->setParameter('type', 'email')
                ->setParameter('username', strtolower($username))
                ->setParameter('email', strtolower($username))
                ->getOneOrNullResult();

        if (null === $user) {
            $message = sprintf(
                'Unable to find an active user EdcomsCMSAuthBundle:cmsUsers object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message);
        }
        return $user;
    }

    /**
     * Get user by id returning full set of contacts
     *
     * @param $id
     * @return mixed
     */
    public function getFullUserById($id)
    {
        $user = $this->getEntityManager('edcoms_cms')
            ->createQuery("SELECT u, p, c, g, ud, d "
                . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                . "LEFT JOIN u.person p "
                . "LEFT JOIN p.contacts c "
                . "LEFT JOIN u.groups g "
                . "LEFT JOIN u.dashboard ud "
                . "LEFT JOIN ud.dashboard_item d "
                . "WHERE u.id =:id")
            ->setParameter('id', $id)
            ->getOneOrNullResult();

        if (null === $user) {
            $message = sprintf(
                'Unable to find an active user EdcomsCMSAuthBundle:cmsUsers object identified by "%s".',
                $id
            );
            throw new UsernameNotFoundException($message);
        }
        return $user;
    }
    
    public function findByEmail($email)
    {
        $user = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE c.type=:type AND u.deleted=false AND c.value=:email")
                ->setParameter('type', 'email')
                ->setParameter('email', strtolower($email))
                ->getOneOrNullResult();

        if (null === $user) {
            return false;
        }
        return $user;
    }
    
    public function findByGroup($group)
    {
        $user = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE u.deleted=false AND g.name=:group")
                ->setParameter('group', $group)
                ->getResult();

        if (null === $user) {
            return false;
        }
        return $user;
    }
    
    public function findByGroupAndEmail($group, $email)
    {
        $user = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE c.type=:type AND u.deleted=false AND c.value=:email AND g.name=:group")
                ->setParameter('type', 'email')
                ->setParameter('email', strtolower($email))
                ->setParameter('group', $group)
                ->getOneOrNullResult();

        if (null === $user) {
            return false;
        }
        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }
    
    public function getPerson() {
        return $this->getEntityManager('edcoms_cms')
               ->getPerson();
    }
    
    /**
     * 
     * @param \DateTime $date
     * @param string $type
     * @param string $value
     * @return cmsUsers
     */
    public function findByDateCustomField(\DateTime $date, $type, $value)
    {
        $users = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN p.contacts cw "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE cw.type=:type AND u.deleted=false AND cw.value=:value AND u.addedOn > :date")
                ->setParameter('type', $type)
                ->setParameter('value', $value)
                ->setParameter('date', $date)
                ->getResult();

        if (null === $users) {
            return false;
        }
        return $users;
    }
    /**
     * 
     * @param \DateTime $date
     * @param string $type
     * @param string $value
     * @return cmsUsers
     */
    public function findByDateRangeCustomField(\DateTime $dateFrom, \DateTime $dateTo, $type, $value)
    {
        $users = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN p.contacts cw "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE cw.type=:type AND u.deleted=0 AND cw.value=:value AND u.addedOn > :dateFrom AND u.addedOn < :dateTo")
                ->setParameter('type', $type)
                ->setParameter('value', $value)
                ->setParameter('dateFrom', $dateFrom)
                ->setParameter('dateTo', $dateTo)
                ->getResult();

        if (null === $users) {
            return false;
        }
        return $users;
    }
    
    public function findAll($deleted=false) {
        $users = $this->getEntityManager('edcoms_cms')
                ->createQuery("SELECT u, p, c, g, ud, d "
                            . "FROM EdcomsCMSAuthBundle:cmsUsers u "
                            . "LEFT JOIN u.person p "
                            . "LEFT JOIN p.contacts c "
                            . "LEFT JOIN u.groups g "
                            . "LEFT JOIN u.dashboard ud "
                            . "LEFT JOIN ud.dashboard_item d "
                            . "WHERE u.deleted=:deleted ")
                ->setParameter('deleted', $deleted)
                ->getResult();

        if (null === $users) {
            return false;
        }
        return $users;
    }
}
